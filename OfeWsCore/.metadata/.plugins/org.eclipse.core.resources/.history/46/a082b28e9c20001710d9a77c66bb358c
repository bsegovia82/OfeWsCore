package com.microservicio.ofe.servicios;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.microservicio.ofe.configuracion.ConfiguracionOfeDataColeccionComprobante;
import com.microservicio.ofe.data.OfeDataColeccionComprobante;
import com.microservicio.ofe.data.OfeParametroServicioRegistroComprobante;
import com.microservicio.ofe.data.OfeParametroServicioRegistroComprobanteClaveValor;
import com.ofe.librerias.util.xml.UtileriaXml;

import scala.util.control.Exception;

@Component
public class ServicioCargaXmlEcuador implements OfeInterfazServicioIngresoXML {

	private static final String TAG_FIN_COD_DOC = "</codDoc>";
	private static final String TAG_INICIO_COD_DOC = "<codDoc>";
	private static final String TAG_INICIO_INFORMACION_ADICIONAL = "<infoAdicional>";
	private static final String TAG_FIN_INFORMACION_ADICIONAL = "</infoAdicional>";
	private static final String SEG_XML_CAMPO_ADICIONAL="<campoAdicional nombre=\"@CLAVE@\">@VALOR@</campoAdicional>";
	private static final String TAG_INICIO_CLAVE_ACCESO = "<claveAcceso>";
	private static final String TAG_FIN_CLAVE_ACCESO = "</claveAcceso>";
	@Autowired
	private ConfiguracionOfeDataColeccionComprobante lConfiguracion;
	
	private String generarDatosAdicionalesXML(List<OfeParametroServicioRegistroComprobanteClaveValor> listaClaveValor)
	{
		listaClaveValor= listaClaveValor==null?new ArrayList<>():listaClaveValor;
		String lResultado="";
		for (OfeParametroServicioRegistroComprobanteClaveValor claveValor : listaClaveValor)
		{
			lResultado +=SEG_XML_CAMPO_ADICIONAL.replace("@CLAVE@", claveValor.getLsClave()).replace("@VALOR@", claveValor.getLsValor());
		}
		return lResultado;	
	}
	
	@Override
	public void cargarDatosAdicionales(OfeParametroServicioRegistroComprobante lOfeComprobanteFisico,
			OfeDataColeccionComprobante lOfeComproFisico) throws Exception {

		String lSXml = lOfeComproFisico.getLSXmlSerializado();
		String lSDatosAdicionales = generarDatosAdicionalesXML(lOfeComprobanteFisico.getlDatosAdicionales());
		if (lSDatosAdicionales.length()>3)
			lOfeComproFisico.setLSXmlSerializado(UtileriaXml.insertarValorTag(TAG_FIN_INFORMACION_ADICIONAL, lSDatosAdicionales, lSXml));

	}

	@Override
	public void asignacionClaveAcceso(OfeDataColeccionComprobante lOfeComprobanteFisico) throws Exception
	{
		String lClaveAcceso = lOfeComprobanteFisico.getLSClaveAcceso();
		String lXml = lOfeComprobanteFisico.getLSXmlSerializado();
		String lsClaveAcceso = "";
		if (lClaveAcceso.equals(lConfiguracion.getClaveaccesodefecto()))
		{
			//Buscar claveAccesoXml
			lsClaveAcceso = UtileriaXml.obtenerValorTags(lXml, TAG_INICIO_CLAVE_ACCESO, TAG_FIN_CLAVE_ACCESO);
			
			
			
		}
		
	}

	private static String obtenerTipoDocumento(String lsXml) throws Exception {

		if (lsXml.contains(TAG_INICIO_COD_DOC) && lsXml.contains(TAG_FIN_COD_DOC)) {
			return UtileriaXml.obtenerValorTags(TAG_INICIO_COD_DOC, TAG_FIN_COD_DOC, lsXml);
		} else {
			throw new Exception("EL XML NO CUENTA CON TIPO DOCUMENTO, XML INVALiDO");
		}

	}

}
